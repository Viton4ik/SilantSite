1. BackEnd

1.1 Создаем виртуальное окружение командой python3 -m venv ./venv
1.2. Запускаем окружение source venv/bin/activate

1.3. Устанавливаем необходимые библиотеки:
pip install django
pip install djangorestframework
pip install django-cors-headers
pip install django-filter

1.4. Создаем проект django-admin startproject Project

1.5. Прописываем в настройки установленные модули:
 - settings.py:
        - Добавляем в INSTALLED_APPS в конец:
            'django_filters',
            'rest_framework', 
            'corsheaders',
        - Добавляем в MIDDLEWARE в конец:
            'corsheaders.middleware.CorsMiddleware',
        - Добавляем в конец файла:
            - CORS — это система совместного использования ресурсов между разными источниками. 
                Эта система, ограничивающая взаимодействие бэкенд-сервера с фронтендом. 
                И никакие другие запросы не будут пропущены. Если наш сервер решит отправить запрос серверу google.com,
                CORS заблокирует этот запрос.
            - в конец файла:
            CORS_ORIGIN_ALLOW_ALL = False
            CORS_ORIGIN_WHITELIST = [
                'http://localhost:8002',
                'http://localhost:3000',
            ]
            CORS_ALLOWED_ORIGINS = [
                'http://localhost:8002',
                'http://localhost:3000',
            ]
        - в конец файла:
        # from rest_framework settings
        REST_FRAMEWORK = {
            'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
            'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
            'PAGE_SIZE': 10,
            #  'DEFAULT_AUTHENTICATION_CLASSES': [
            #     'rest_framework.authentication.BasicAuthentication',
            #     'rest_framework.authentication.SessionAuthentication',
            # ],
            #        'DEFAULT_PERMISSION_CLASSES': [
            #        'rest_framework.permissions.IsAuthenticated',
            #  'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
            #    ]
        }
        - меняем:
        # set a folder for templates
        'DIRS': [os.path.join(BASE_DIR, 'templates')],

1.6. Создаем новое приложение Django под названием app, выполняем команды из окружения:
    - cd Project (root folder)
    - python manage.py startapp App
1.7. Возвращаемся к файлу settings.py
    - Добавляем в INSTALLED_APPS в конец наше приложение:
        'App',
1.8. Выполняем миграцию базы данных:  python manage.py migrate

1.9. Запускаем локальный сервер: python manage.py runserver

1.10. python3 manage.py createsuperuser

1.11. Models, python manage.py makemigrations, python manage.py migrate

1.12. Admin panel

1.13 REST_FRAMEWORK
    - serializers
    - views for serializers
    - urls for serializers

1.14. Swagger
 - pip install django djangorestframework drf-yasg
 - schema_view has to be added to urls.py
 - 'drf_yasg', has to be added to settings.py -> INSTALLED_APPS

1.15 authentication features 
    - # site in admin panel 
     'django.contrib.sites', has to be added to settings.py -> INSTALLED_APPS
    - SITE_ID = 1  # allauth, flatpages, site


2. FrontEnd


2.1 Folder 'templates' to be created in a root dir

2.2. Folder 'static' to be created in App dir

2.3. 404.html created

2.4. indexPage created

2.5. header&footer created (for the default page)

2.6 Main Table created